class Solution:
    def dfs(self, board, word, i, j, r, c):
        if i < 0 or i >= r or j < 0 or j >= c or word[0] != board[i][j]:
            return
        
        if len(word) == 1:
            return True
        
        character = board[i][j]
        board[i][j] = "#"
        condition =  self.dfs(board, word[1:], i-1, j, r, c) or self.dfs(board, word[1:], i, j-1, r, c) or self.dfs(board, word[1:], i+1, j, r, c) or self.dfs(board, word[1:], i, j+1, r, c)
        board[i][j] = character
        return condition
        x
    def exist(self, board: List[List[str]], word: str) -> bool:
        r = len(board)
        c = len(board[0])
        for i in range(r):
            for j in range(c):
                if board[i][j] == word[0]:
                    if self.dfs(board, word, i, j, r, c):
                        return True
        return False
                    
        
