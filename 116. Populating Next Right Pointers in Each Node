"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""

class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if not root:
            return
        
        if root.left:
            root.left.next = root.right
        
            if root.next:
                root.right.next = root.next.left
        
        self.connect(root.left)
        self.connect(root.right)
        return root
        
    
    
#     def connect(self, root: 'Node') -> 'Node':
#         if not root:
#             return root
        
#         queue = collections.deque([root, None])
#         prev = None
#         while queue:
#             node = queue.popleft()
#             if not queue and not node:
#                 break
            
#             if prev:
#                 prev.next = node
                
#             if node:
#                 if node.left:
#                     queue.append(node.left)
#                 if node.right:
#                     queue.append(node.right)
#             else:
#                 queue.append(None)
#             prev = node
#         return root
            
        
