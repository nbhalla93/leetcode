class Solution:
    def search(self, L, a, modulus, n, nums):
        h = 0
        for i in range(L):
            h = (h*a + nums[i]) % modulus
            
        seen = {h}
        
        aL = pow(a, L, modulus)
        for start in range(1,n-L+1):
            h = (h * a - nums[start - 1] * aL + nums[start + L - 1]) % modulus
            if h in seen:
                return start
            seen.add(h)
        return -1
        
    def longestDupSubstring(self, S: str) -> str:
        n = len(S)
        
        #Converting string to array of integers to implement constant time slice
        nums = [ord(S[i]) - ord('a') for i in range(n)]
        hashValue = 26
        
        # To prevent overflowing
        mod = 2**32 
        
        l = 1
        h = n
        while l <= h:
            mid = (l+h)//2
            if self.search(mid, hashValue, mod,n,nums) != -1:
                l = mid + 1
            else:
                h = mid - 1

        start = self.search(l-1, hashValue, mod,n,nums)
        return S[start:start +l -1]
            
        
        
        
        
        
        
        
        # for i in range(n-1,0,-1):
        #     store = set()
        #     for j in range(n-i+1):
        #         sub = S[j:j+i]
        #         if sub in store:
        #             return sub
        #         else:
        #             store.add(sub)
        # return ""
        
