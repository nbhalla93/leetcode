class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        dirs = [(0,1),(0,-1),(1,0),(-1,0)]
        m = len(matrix)
        if m == 0:
            return 0
        n = len(matrix[0])
        
        dp = [[0]*(n+2) for i in range(m+2)]
        
        for i in range(1,m+1):
            for j in range(1,n+1):
                dp[i][j] = matrix[i-1][j-1]
                
        # Calculate outdegrees
        out_degree = [[0]*(n+2) for i in range(m+2)]
        for i in range(1,m+1):
            for j in range(1,n+1):
                for d in dirs:
                    if dp[i][j] < dp[i+d[0]][j+d[1]]:
                        out_degree[i][j] += 1
                        
        # Create a list of leaves with 0 out degrees
        leaves = collections.deque()
        for i in range(1, m+1):
            for j in range(1,n+1):
                if out_degree[i][j] == 0:
                    leaves.append((i,j))
        
        height = 0
        while leaves:
            height += 1
            n = len(leaves)
            for i in range(n):
                node = leaves.popleft()
                for d in dirs:
                    x,y = node[0] + d[0], node[1] + d[1]
                    if dp[node[0]][node[1]] >  dp[x][y]:
                        out_degree[x][y] -= 1
                        if out_degree[x][y] == 0:
                            leaves.append((x,y))
        return height
            
