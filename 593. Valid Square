from itertools import combinations
class Solution:
    def distance(self, p1, p2):
        return (p1[0] - p2[0])**2 + (p1[1] - p2[1])**2
    
    def validSquare(self, p1: List[int], p2: List[int], p3: List[int], p4: List[int]) -> bool:
        hash_map = collections.defaultdict(int)

        for c in combinations([p1,p2,p3,p4], 2):
            hash_map[self.distance(c[0],c[1])] += 1

        if len(hash_map) == 2 and set(hash_map.values()) == set([2,4]):
            return True
        
        return False
