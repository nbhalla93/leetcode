class DLinkedList:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.prev = None
        self.next = None
        
class LRUCache:
    def __init__(self, capacity: int):
        self.hashMap = {}
        self.capacity = capacity
        self.count = 0
        self.head = DLinkedList(0,0)
        self.tail = DLinkedList(0,0)
        self.head.next = self.tail
        self.tail.next = self.head
        
    def remove(self,node):
        node.prev.next = node.next
        node.next.prev = node.prev
        node.next = None
        node.prev = None
        
    def moveToHead(self, node):
        node.next = self.head.next
        node.prev = self.head
        self.head.next.prev = node
        self.head.next = node
    
    def removeLast(self):
        node = self.tail.prev
        del self.hashMap[node.key]
        node.prev.next = self.tail
        self.tail.prev = node.prev
        self.count -= 1
        
    def add(self,key,value):
        node = DLinkedList(key,value)
        self.hashMap[key] = node
        self.moveToHead(node)
        
    def get(self, key: int) -> int:
        if key in self.hashMap:
            node = self.hashMap[key]
            self.remove(node)
            self.moveToHead(node)
            return node.value
        else:
            return -1

    def put(self, key: int, value: int) -> None:
        if key in self.hashMap:
            node = self.hashMap[key]
            node.value = value
            self.remove(node)
            self.moveToHead(node)
        else:
            if self.count == self.capacity:
                self.removeLast()
            self.add(key,value)
            self.count += 1

# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
