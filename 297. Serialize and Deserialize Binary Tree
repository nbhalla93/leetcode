# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:
    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        
        def rserialize(root,string):
            if root is None:
                string += '#,'
            else:
                string += str(root.val) + ','
                string = rserialize(root.left, string)
                string = rserialize(root.right, string)
            return string
        
        created = rserialize(root, "")[:-1]
        return created

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        array = data.split(',')

        def rdeserialize(data):
            if data[0] == '#':
                data.pop(0)
                return None
                
            node = TreeNode(array[0])
            data.pop(0)
            node.left = rdeserialize(data)
            node.right = rdeserialize(data)
            return node
    
        root = rdeserialize(array)
        return root


# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))
