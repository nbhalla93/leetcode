class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
        if n*k == 0:
            return []
        
        if k == 1:
            return nums
        
        left = [0]*n
        right = [0]*n
        left[0] = nums[0]
        right[n-1] = nums[n-1]
        
        for i in range(1,n):
            if i % k == 0:
                left[i] = nums[i]
            else:
                left[i] = max(left[i-1], nums[i])
            
            j = n - 1 - i
            if (j+1)%k == 0:
                right[j] = nums[j]
            else:
                right[j] = max(right[j+1], nums[j])
        
        i = 0
        j = k-1
        output = []
        while j < n:
            output.append(max(right[i], left[j]))
            i += 1
            j += 1
        return output
            

            

#     def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
#         n = len(nums)
#         if n*k == 0:
#             return []
        
#         if k == 1:
#             return nums
        
#         deq = collections.deque()

#         def clearQueue(i):
#             if deq and deq[0] == i -k:
#                 deq.popleft()
                
#             while deq and nums[deq[-1]] < nums[i]:
#                 deq.pop()
        
#         for i in range(k):
#             clearQueue(i)
#             deq.append(i)
#         output = [nums[deq[0]]]
        
#         for j in range(k,n):
#             clearQueue(j)
#             deq.append(j)
#             output.append(nums[deq[0]])
#         return output
        
