# class Solution:
#     def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
#         output = []
#         row = len(matrix) 
#         if not row:
#             return output
        
#         column = len(matrix[0])
#         seen = [[False]*column for _ in range(row)]
        
#         dr = [0,1,0,-1]
#         dc = [1,0,-1,0]
        
#         r,c = 0,0
#         cd = 0
#         for _ in range(row*column):
#             output.append(matrix[r][c])
#             seen[r][c] = True
#             cr,cc = r + dr[cd], c + dc[cd]
#             if 0 <= cr and cr < row and  0<=cc and cc<column and not seen[cr][cc]:
#                 r,c = cr,cc
#             else:
#                 cd = (cd + 1)%4
#                 r,c = r + dr[cd], c + dc[cd]
#         return output

class Solution(object):
    def spiralOrder(self, matrix):
        def spiral_coords(r1, c1, r2, c2):
            for c in range(c1, c2 + 1):
                yield r1, c
            for r in range(r1 + 1, r2 + 1):
                yield r, c2
            if r1 < r2 and c1 < c2:
                for c in range(c2 - 1, c1, -1):
                    yield r2, c
                for r in range(r2, r1, -1):
                    yield r, c1

        if not matrix: return []
        ans = []
        r1, r2 = 0, len(matrix) - 1
        c1, c2 = 0, len(matrix[0]) - 1
        while r1 <= r2 and c1 <= c2:
            for r, c in spiral_coords(r1, c1, r2, c2):
                ans.append(matrix[r][c])
            r1 += 1; r2 -= 1
            c1 += 1; c2 -= 1
        return ans


            
                    
                
        
