class Solution:
    def possibleBipartition(self, N: int, dislikes: List[List[int]]) -> bool:
        graph = collections.defaultdict(list)        
        for d in dislikes:
            a = d[0]
            b = d[1]
            graph[a].append(b)
            graph[b].append(a)
        
        color = {}
        C = "R" 
        for i in range(1,N+1):
            if not i in color:
                queue = collections.deque([i])
                queue.append(None)
                while queue:
                    if len(queue) == 1:
                        break
                    node = queue.popleft()
                    if node:
                        if node in color:
                            if color[node] == C:
                                return False
                        else:
                            color[node] = "R" if C == "B" else "B"
                        
                        for n in graph[node]:
                            if n in color:
                                if not color[n] == C:
                                    return False
                            else:
                                queue.append(n)
                    
                    else:
                        C = "R" if C == "B" else "B"
                        queue.append(None)
        return True
                
                
                
                
        
