class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        
        gid_weight = {}
        
        def find(node_id):
            if node_id not in gid_weight:
                gid_weight[node_id] = (node_id, 1)
            gid,w = gid_weight[node_id]
            if gid != node_id:
                new_gid, new_w = find(gid)
                gid_weight[node_id] = (new_gid, w*new_w)
            return gid_weight[node_id]
            
            
        def union(dividend, divisor, value):
            dividend_gid, dividend_w = find(dividend)
            divisor_gid, divisor_w = find(divisor)
            
            if dividend_gid != divisor_gid:
                gid_weight[dividend_gid] = (divisor_gid, divisor_w*value/dividend_w)
            
        # Build the union groups
        for (dividend, divisor), value in zip(equations, values):    
            union(dividend, divisor, value)
            
        results = []
        for (dividend, divisor) in queries:
            if dividend not in gid_weight or divisor not in gid_weight:
                results.append(-1.0)
            else:
                dividend_gid, dividend_w = find(dividend)
                divisor_gid, divisor_w = find(divisor)
                
                if dividend_gid != divisor_gid:
                    results.append(-1.0)
                else:
                    results.append(dividend_w/divisor_w)
        return results
            
            
